name: AI PR Review 

on:
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]

permissions:
  contents: read
  pull-requests: write
  statuses: write

env:
  # Change to APPROVE / REQUEST_CHANGES / COMMENT
  REVIEW_EVENT: COMMENT
  # Configure which CLI to run for the review. Default is amp execute mode.
  REVIEW_CLI_BIN: amp
  REVIEW_CLI_ARGS: -x
  # Tweak to your liking  
  SYSTEM_PROMPT: |
    Review this patch like a thoughtful senior engineer.
    Prioritize correctness, security, performance, readability, and tests.
    Be concise and constructive. Praise good changes. Group related issues.

jobs:
  review:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Verify tools
        run: |
          node -v
          npm -v
          jq --version
          curl --version

      - name: Install review CLI if missing (defaults to amp)
        run: |
          set -euo pipefail
          if ! command -v "$REVIEW_CLI_BIN" >/dev/null 2>&1; then
            if [ "$REVIEW_CLI_BIN" = "amp" ]; then
              echo "Installing latest amp via npm..."
              npm install -g @sourcegraph/amp@latest || {
                echo "npm install failed; trying curl installer for latest..." >&2
                curl -fsSL https://ampcode.com/install.sh | bash
              }
              command -v amp >/dev/null 2>&1 || { echo "amp not found after install" >&2; exit 1; }
              amp --version
            elif [ "$REVIEW_CLI_BIN" = "claude" ]; then
              echo "Installing claude via npm..."
              npm install -g @anthropic-ai/claude-code
              command -v claude >/dev/null 2>&1 || { echo "claude not found after install" >&2; exit 1; }
              claude --version || true
            else
              echo "Configured REVIEW_CLI_BIN=$REVIEW_CLI_BIN not found on PATH. Please ensure it is preinstalled." >&2
              exit 1
            fi
          else
            "$REVIEW_CLI_BIN" --version || true
          fi


      - name: Gather PR context
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          # Set for this step and export for later steps
          PR="${{ github.event.pull_request.number }}"
          SHA="${{ github.event.pull_request.head.sha }}"
          echo "PR=$PR" >> "$GITHUB_ENV"
          echo "SHA=$SHA" >> "$GITHUB_ENV"

          # Use explicit repo + PR number in detached HEAD context
          gh pr view "$PR" --repo "${{ github.repository }}" --json number,title,body,author,baseRefName,headRefName,url > pr.json
          gh pr diff "$PR" --repo "${{ github.repository }}" --patch > diff.patch

      - name: Run AI review
        env:
          AI_API_KEY: ${{ secrets.AI_API_KEY }}
          AMP_API_KEY: ${{ secrets.AMP_API_KEY }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          set -euo pipefail
          # Map AI_API_KEY to vendor-specific vars when missing
          export AMP_API_KEY="${AMP_API_KEY:-${AI_API_KEY:-}}"
          export ANTHROPIC_API_KEY="${ANTHROPIC_API_KEY:-${AI_API_KEY:-}}"
          # Mask API keys in logs just in case
          if [ -n "${AI_API_KEY:-}" ]; then echo "::add-mask::${AI_API_KEY}"; fi
          if [ -n "${AMP_API_KEY:-}" ]; then echo "::add-mask::${AMP_API_KEY}"; fi
          if [ -n "${ANTHROPIC_API_KEY:-}" ]; then echo "::add-mask::${ANTHROPIC_API_KEY}"; fi

          # Compose the instruction sent to cli (plain Markdown output)
          INSTRUCTION=$(cat <<'EOF'
          You are performing a single-pass human-style PR review.

          Inputs:
          - You will receive a unified diff (the PR patch) via stdin.
          - Comment only on added lines; avoid spam.

          Output format - plain Markdown with these sections:
          
          ## Summary
          [Overall assessment in 2-3 sentences]
          
          ## Comments
          [If you have specific inline comments, list them as:]
          - **filename.ext:L123**: [comment about that line]
          
          ## Status
          [Either "✅ LGTM" or "❌ Needs work" with brief reason]
          
          Keep it concise and constructive. Focus on correctness, security, and readability.
          EOF
          )

          # Run CLI in execute mode: diff on stdin, instruction as the message
          echo "Running AI review..."
          echo "Command: $REVIEW_CLI_BIN $REVIEW_CLI_ARGS"
          echo "Diff size: $(wc -c < diff.patch) bytes"
          cat diff.patch | timeout 300 "$REVIEW_CLI_BIN" $REVIEW_CLI_ARGS "${SYSTEM_PROMPT}

          ${INSTRUCTION}" > review.md || {
            echo "AI call failed or timed out, creating fallback response"
            echo "## Summary" > review.md
            echo "AI review timed out or failed." >> review.md
            echo "" >> review.md
            echo "## Status" >> review.md
            echo "✅ LGTM (fallback due to timeout)" >> review.md
          }

          echo "AI review completed"
          echo "--- Review Output ---"
          cat review.md
          echo -e "\n--- End Review Output ---"

          # Parse status for commit status (look for ✅ or ❌)
          if grep -q "❌" review.md; then
            echo '{"state":"failure","description":"AI Review found issues"}' > status.json
          else
            echo '{"state":"success","description":"AI Review completed"}' > status.json
          fi

      - name: Post PR review
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail

          # Build review payload with just the markdown body
          jq -n \
            --arg event "${REVIEW_EVENT}" \
            --arg body "$(cat review.md)" \
            '{ event: $event, body: $body }' > review_payload.json

          # Post the review
          gh api \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            "repos/${{ github.repository }}/pulls/$PR/reviews" \
            --input review_payload.json

      - name: Set commit status from AI StatusJSON
        if: always()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -euo pipefail
          # Guard: create a default status if missing
          if [ ! -f status.json ]; then
            echo '{"state":"success","description":"AI Review completed"}' > status.json
          fi
          STATE=$(jq -r '.state // "success"' status.json)
          DESC=$(jq -r '.description // "AI Review completed"' status.json)
          SHA="${{ github.event.pull_request.head.sha }}"
          gh api \
            -X POST \
            repos/${{ github.repository }}/statuses/${SHA} \
            -f state="$STATE" \
            -f context="AI PR Review" \
            -f description="$DESC"
