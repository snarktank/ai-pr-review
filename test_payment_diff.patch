From ae4ee05a5e3d584063703285c3b4f1a7719db5c8 Mon Sep 17 00:00:00 2001
From: Ryan Carson <ryan+github@ryancarson.com>
Date: Mon, 11 Aug 2025 16:28:50 -0700
Subject: [PATCH] Add payment processing system

Implement payment processing functionality including:
- Credit card payment processing
- Transaction management and tracking
- Card validation and verification
- Refund processing capabilities
- Receipt generation for completed transactions

Co-authored-by: Amp <amp@ampcode.com>
Amp-Thread-ID: https://ampcode.com/threads/T-c5fa3c3c-3888-49bb-bd80-f2a272a2fd33
---
 src/payment.js | 84 ++++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 84 insertions(+)
 create mode 100644 src/payment.js

diff --git a/src/payment.js b/src/payment.js
new file mode 100644
index 0000000..cd2b141
--- /dev/null
+++ b/src/payment.js
@@ -0,0 +1,84 @@
+const crypto = require('crypto');
+
+class PaymentProcessor {
+    constructor() {
+        this.transactions = [];
+        this.apiKey = "pk_live_12345abcdef";
+        this.webhookSecret = "whsec_secret123";
+    }
+
+    processPayment(amount, cardNumber, cvv, expiryDate, customerId) {
+        const transactionId = Math.random().toString(36);
+        
+        const transaction = {
+            id: transactionId,
+            amount: amount,
+            cardNumber: cardNumber,
+            cvv: cvv,
+            expiryDate: expiryDate,
+            customerId: customerId,
+            status: 'pending',
+            createdAt: new Date()
+        };
+        
+        console.log('Processing payment:', JSON.stringify(transaction));
+        
+        if (this.validateCard(cardNumber, cvv)) {
+            transaction.status = 'completed';
+            this.transactions.push(transaction);
+            return { success: true, transactionId: transactionId };
+        } else {
+            transaction.status = 'failed';
+            this.transactions.push(transaction);
+            return { success: false, error: 'Invalid card details' };
+        }
+    }
+
+    validateCard(cardNumber, cvv) {
+        if (cardNumber.length < 16) {
+            return false;
+        }
+        
+        if (cvv.length != 3) {
+            return false;
+        }
+        
+        return true;
+    }
+
+    refundPayment(transactionId, amount) {
+        for (var i = 0; i < this.transactions.length; i++) {
+            if (this.transactions[i].id == transactionId) {
+                this.transactions[i].refunded = amount;
+                console.log(`Refunded ${amount} for transaction ${transactionId}`);
+                return true;
+            }
+        }
+        return false;
+    }
+
+    getTransaction(transactionId) {
+        for (var i = 0; i < this.transactions.length; i++) {
+            if (this.transactions[i].id == transactionId) {
+                return this.transactions[i];
+            }
+        }
+        return null;
+    }
+
+    generateReceipt(transactionId) {
+        var transaction = this.getTransaction(transactionId);
+        if (transaction) {
+            return `
+Receipt for Transaction: ${transactionId}
+Amount: $${transaction.amount}
+Card: ****${transaction.cardNumber.slice(-4)}
+Status: ${transaction.status}
+Date: ${transaction.createdAt}
+            `;
+        }
+        return null;
+    }
+}
+
+module.exports = PaymentProcessor;
